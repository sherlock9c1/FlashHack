#include "map.h"

#include <QDebug>

region::region(unsigned int offset, unsigned int length) {
  this->offset = offset;
  this->size = length;
}

region::region() {
  offset = 0x00;
  size = 0x00;
}

unsigned int region::last_byte() const {
  return offset + size - 1;
}

bool region::is_valid() const {
  if(size == 0) return false;
  return true;
}

QString region::to_string() const {
  return QString::number(offset,16).toUpper() + "[" + QString::number(size,16).toUpper() + "]";
}


map::map(int bin_size) {
  resize(bin_size);
}

map::map() {
  
}

void map::clear() {
  resize(bin_size);
}

void map::set_max_block_size(int size) {
  max_block_size = size;
}

void map::resize(int bin_size) {
  this->bin_size = bin_size;
  log.clear();
  log.resize(bin_size);
  list.clear();
}

int map::mapped_bytes() const {
  int total = 0;
  for(int x=0;x<list.size();x++) total += at(x).size;
  return total;
}

int map::size() const {
  return list.size();
}

void map::append(int offset, int size, QString label) {
  int first_byte = offset;
  int max_byte = offset + size - 1;
  int last_bin_byte = bin_size - 1;

  // limits.
  if(bin_size < 1) return;
  if(size < 1) return;
  if(max_byte > last_bin_byte) max_byte = last_bin_byte;
  if(max_byte < first_byte) return;

  // determine our actual first byte that's not on an existing region.
  while(first_byte < max_byte && log.at(first_byte) == true) first_byte++;

  int max_block_byte = first_byte + max_block_size - 1;
  if(max_block_size < 1) max_block_byte = max_byte;

  // handle nothing to map condition.
  if(log.at(first_byte) == true) return;

  // now we have at least one byte.  lets determine our actual end point.  if we are less than maximum but our
  // next byte is not set, then we can advance the cursor.
  int last_byte = first_byte;
  while(last_byte < max_byte && last_byte < max_block_byte && log.at(last_byte + 1) == false) last_byte++;

  int block_size = last_byte - first_byte + 1;

  // update the log
  for(int x=0;x<block_size;x++) log.setBit(first_byte + x);

  // add the region
  region r(first_byte, block_size);
  r.region_name = label;
  list.append(r);

  // recurse if required to complete remainder.
  append(first_byte + block_size, size - block_size - 1);
}

void map::append(const region &r) {
  append(r.offset,r.size,r.region_name);
}

void map::append(const map &m) {
  for(int x=0;x<m.list.size();x++) {
    append(m.at(x));
  }
}

void map::skip(int offset, int size) {
  // FIXME check range here
  for(int x=0;x<size;x++) log.setBit(offset + x);
}

void map::unskip(int offset, int size) {
  // FIXME check range here
  for(int x=0;x<size;x++) log.clearBit(offset + x);
}

void map::map_all() {
  append(0,bin_size);
}

region map::take_next() {
  if(list.isEmpty() == true) return region();
  return list.takeFirst();
}

region map::at(int position) const {
  return list.at(position);
}

void map::skip_byte(unsigned char skip_byte, int min_section_length, const QByteArray &data) {
  int count = 0; // tmp
  int x = 0;
  while(x < bin_size) {
    // handle already mapped or non skip bytes.
    if(log.at(x) == true || (unsigned char)data.at(x) != skip_byte) {
      x++;
      continue;
    }
    // region is now on a skip byte, find the length of the region.
    int y = x;
    while(y < bin_size && (unsigned char)data.at(y) == skip_byte) y++;
    int region_size = y - x;
    if(region_size >= min_section_length) {
      skip(x,region_size);
      count += region_size;
    }
    x += region_size;
  }
}

QString map::to_string() const {
  QString out;
  for(int x=0;x<list.size();x++) {
    out.append(list.at(x).to_string() + '\n');
  }
  return out;
}

bool map::is_complete() {
  for(int x=0;x<log.size();x++) if(log.at(x) == false) return false;
  return true;
}
